"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadWAD = downloadWAD;
exports.setupWAD = setupWAD;
exports.default = exports.isAdmin = exports.getWADExecutablePath = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _es6Error = _interopRequireDefault(require("es6-error"));

var _registry = require("./registry");

const WAD_VER = '1.2.99';
const WAD_DOWNLOAD_MD5 = Object.freeze({
  x32: '23745e6ed373bc969ff7c4493e32756a',
  x64: '2923fc539f389d47754a7521ee50108e',
  arm64: 'b9af4222a3fb0d688ecfbf605d1c4500'
});
const ARCH_MAPPING = Object.freeze({
  x32: 'x86',
  x64: 'x64',
  arm64: 'arm64'
});
const WAD_DOWNLOAD_TIMEOUT_MS = 60000;
const POSSIBLE_WAD_INSTALL_ROOTS = [process.env['ProgramFiles(x86)'], process.env.ProgramFiles, `${process.env.SystemDrive || 'C:'}\\\\Program Files`];
const WAD_EXE_NAME = 'WinAppDriver.exe';
const UNINSTALL_REG_ROOT = 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall';
const REG_ENTRY_VALUE = 'Windows Application Driver';
const REG_ENTRY_KEY = 'DisplayName';
const REG_ENTRY_TYPE = 'REG_SZ';

const INST_LOCATION_SCRIPT_BY_GUID = guid => `
Set installer = CreateObject("WindowsInstaller.Installer")
Set session = installer.OpenProduct("${guid}")
session.DoAction("CostInitialize")
session.DoAction("CostFinalize")
WScript.Echo session.Property("INSTALLFOLDER")
`.replace(/\n/g, '\r\n');

function generateWadDownloadLink() {
  const wadArch = ARCH_MAPPING[process.arch];

  if (!wadArch) {
    throw new Error(`System architecture '${process.arch}' is not supported by Windows Application Driver. ` + `The only supported architectures are: ${_lodash.default.keys(ARCH_MAPPING)}`);
  }

  return `https://github.com/Microsoft/WinAppDriver` + `/releases/download/v${WAD_VER}/WindowsApplicationDriver-${WAD_VER}-win-${wadArch}.exe`;
}

async function fetchMsiInstallLocation(installerGuid) {
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  const scriptPath = _path.default.join(tmpRoot, 'get_wad_inst_location.vbs');

  try {
    await _appiumSupport.fs.writeFile(scriptPath, INST_LOCATION_SCRIPT_BY_GUID(installerGuid), 'latin1');
    const {
      stdout
    } = await (0, _teen_process.exec)('cscript.exe', ['/Nologo', scriptPath]);
    return _lodash.default.trim(stdout);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
}

class WADNotFoundError extends _es6Error.default {}

const getWADExecutablePath = _lodash.default.memoize(async function getWADInstallPath() {
  const wadPath = process.env.APPIUM_WAD_PATH;

  if (await _appiumSupport.fs.exists(wadPath)) {
    _logger.default.debug(`Loaded WinAppDriver path from the APPIUM_WAD_PATH environment variable: ${wadPath}`);

    return wadPath;
  }

  const pathCandidates = POSSIBLE_WAD_INSTALL_ROOTS.filter(Boolean).map(root => _path.default.resolve(root, REG_ENTRY_VALUE, WAD_EXE_NAME));

  for (const result of pathCandidates) {
    if (await _appiumSupport.fs.exists(result)) {
      return result;
    }
  }

  _logger.default.debug('Did not detect WAD executable at any of the default install locations');

  _logger.default.debug('Checking the system registry for the corresponding MSI entry');

  try {
    const uninstallEntries = await (0, _registry.queryRegistry)(UNINSTALL_REG_ROOT);
    const wadEntry = uninstallEntries.find(({
      key,
      type,
      value
    }) => key === REG_ENTRY_KEY && value === REG_ENTRY_VALUE && type === REG_ENTRY_TYPE);

    if (wadEntry) {
      _logger.default.debug(`Found MSI entry: ${JSON.stringify(wadEntry)}`);

      const installerGuid = _lodash.default.last(wadEntry.root.split('\\'));

      const result = _path.default.join(await fetchMsiInstallLocation(installerGuid), WAD_EXE_NAME);

      _logger.default.debug(`Checking if WAD exists at '${result}'`);

      if (await _appiumSupport.fs.exists(result)) {
        return result;
      }

      _logger.default.debug(result);
    } else {
      _logger.default.debug('No WAD MSI entries have been found');
    }
  } catch (e) {
    if (e.stderr) {
      _logger.default.debug(e.stderr);
    }

    _logger.default.debug(e.stack);
  }

  throw new WADNotFoundError(`${WAD_EXE_NAME} has not been found in any of these ` + `locations: ${pathCandidates}. Is it installed?`);
});

exports.getWADExecutablePath = getWADExecutablePath;

async function downloadWAD() {
  const downloadLink = generateWadDownloadLink();

  const installerPath = _path.default.resolve(await _appiumSupport.tempDir.staticDir(), `wad_installer_${WAD_VER}_${_appiumSupport.util.uuidV4()}.exe`);

  _logger.default.info(`Downloading ${downloadLink} to '${installerPath}'`);

  await _appiumSupport.net.downloadFile(downloadLink, installerPath, {
    timeout: WAD_DOWNLOAD_TIMEOUT_MS
  });
  const downloadedMd5 = await _appiumSupport.fs.md5(installerPath);
  const expectedMd5 = WAD_DOWNLOAD_MD5[process.arch];

  if (downloadedMd5 !== expectedMd5) {
    await _appiumSupport.fs.rimraf(installerPath);
    throw new Error(`Installer executable checksum validation error: expected ${expectedMd5} but got ${downloadedMd5}`);
  }

  return installerPath;
}

const isAdmin = _lodash.default.memoize(async function isAdmin() {
  try {
    await (0, _teen_process.exec)('fsutil.exe', ['dirty', 'query', process.env.SystemDrive || 'C:']);
    return true;
  } catch (ign) {
    return false;
  }
});

exports.isAdmin = isAdmin;

async function setupWAD() {
  if (!_appiumSupport.system.isWindows()) {
    throw new Error(`Can only download WinAppDriver on Windows!`);
  }

  try {
    return await getWADExecutablePath();
  } catch (e) {
    if (!(e instanceof WADNotFoundError)) {
      throw e;
    }

    _logger.default.info(`WinAppDriver doesn't exist, setting up`);
  }

  if (!(await isAdmin())) {
    throw new Error(`You are not running as an administrator so WinAppDriver cannot be installed for you; please reinstall as admin`);
  }

  const installerPath = await downloadWAD();

  _logger.default.info('Running installer');

  try {
    await (0, _teen_process.exec)(installerPath, ['/install', '/quiet', '/norestart']);
  } finally {
    await _appiumSupport.fs.rimraf(installerPath);
  }
}

var _default = setupWAD;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
